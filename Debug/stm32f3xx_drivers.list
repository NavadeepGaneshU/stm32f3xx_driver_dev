
stm32f3xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000b9c  08000b9c  00010b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bb8  08000bb8  00010bc0  2**0
                  CONTENTS
  4 .ARM          00000000  08000bb8  08000bb8  00010bc0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bb8  08000bc0  00010bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bb8  08000bb8  00010bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bbc  08000bbc  00010bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bc0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bc0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001853  00000000  00000000  00010bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000492  00000000  00000000  00012443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  000128d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  00012a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020fa  00000000  00000000  00012b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016f8  00000000  00000000  00014bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000092fe  00000000  00000000  000162f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001f5f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  0001f644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b84 	.word	0x08000b84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000b84 	.word	0x08000b84

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:
|  D12 | D11  |  D13 | D10 | --> Arduino UNO
----------------------------
 */

void delay(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	//~200ms delay when sysclk is 16MHz(internal RC osc)
	for(uint32_t i = 0; i < 50000; i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80001fc:	4293      	cmp	r3, r2
 80001fe:	d9f7      	bls.n	80001f0 <delay+0xc>
}
 8000200:	bf00      	nop
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
	...

08000210 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	//configure GPIOs for button interface
	GpioBtn.pGPIOx = GPIOC;
 8000216:	4b09      	ldr	r3, [pc, #36]	; (800023c <GPIO_ButtonInit+0x2c>)
 8000218:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 800021a:	230d      	movs	r3, #13
 800021c:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800021e:	2300      	movs	r3, #0
 8000220:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000222:	2302      	movs	r3, #2
 8000224:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8000226:	2300      	movs	r3, #0
 8000228:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f991 	bl	8000554 <GPIO_Init>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	48000800 	.word	0x48000800

08000240 <SPI1_GPIOInit>:

void SPI1_GPIOInit(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI1_Pins;		//define handle variable for defining GPIO functions

	SPI1_Pins.pGPIOx = GPIOA;
 8000246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024a:	607b      	str	r3, [r7, #4]
	SPI1_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;	//because we're doing SPI
 800024c:	2302      	movs	r3, #2
 800024e:	727b      	strb	r3, [r7, #9]
	SPI1_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;		//AF5 from the AltFn table in datasheet
 8000250:	2305      	movs	r3, #5
 8000252:	737b      	strb	r3, [r7, #13]
	SPI1_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PU;
 8000254:	2301      	movs	r3, #1
 8000256:	72fb      	strb	r3, [r7, #11]
	SPI1_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 8000258:	2300      	movs	r3, #0
 800025a:	733b      	strb	r3, [r7, #12]
	SPI1_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800025c:	2302      	movs	r3, #2
 800025e:	72bb      	strb	r3, [r7, #10]

	//SCLK Pin
	SPI1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000260:	2305      	movs	r3, #5
 8000262:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI1_Pins);	//passing address of the handle
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f000 f974 	bl	8000554 <GPIO_Init>

	//MOSI Pin
	SPI1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800026c:	2307      	movs	r3, #7
 800026e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI1_Pins);
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f96e 	bl	8000554 <GPIO_Init>
//	//MISO Pin
//	SPI1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
//	GPIO_Init(&SPI1_Pins);
//
	//NSS Pin
	SPI1_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000278:	2304      	movs	r3, #4
 800027a:	723b      	strb	r3, [r7, #8]
    GPIO_Init(&SPI1_Pins);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f968 	bl	8000554 <GPIO_Init>
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <SPI1_Init>:

void  SPI1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1_Handle;

	SPI1_Handle.pSPIx = SPI1;
 8000292:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <SPI1_Init+0x38>)
 8000294:	607b      	str	r3, [r7, #4]
	SPI1_Handle.SPI_PinConfig.SPI_DeviceMode = SPI_MODE_MASTER;
 8000296:	2301      	movs	r3, #1
 8000298:	723b      	strb	r3, [r7, #8]
	SPI1_Handle.SPI_PinConfig.SPI_BusConfig = SPI_BUS_FD;
 800029a:	2301      	movs	r3, #1
 800029c:	727b      	strb	r3, [r7, #9]
	SPI1_Handle.SPI_PinConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;	//generate SCLK of 2MHz
 800029e:	2302      	movs	r3, #2
 80002a0:	72bb      	strb	r3, [r7, #10]
	SPI1_Handle.SPI_PinConfig.SPI_DFF = SPI_DFF_8BITS;
 80002a2:	2300      	movs	r3, #0
 80002a4:	72fb      	strb	r3, [r7, #11]
	SPI1_Handle.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002a6:	2300      	movs	r3, #0
 80002a8:	733b      	strb	r3, [r7, #12]
	SPI1_Handle.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	737b      	strb	r3, [r7, #13]
	SPI1_Handle.SPI_PinConfig.SPI_SSM =	SPI_SSM_DIS;		//hardware slave management is used
 80002ae:	2300      	movs	r3, #0
 80002b0:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI1_Handle);		//passing address of the handle and this executes
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fb63 	bl	8000980 <SPI_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40013000 	.word	0x40013000

080002c8 <main>:

int main(void)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
	//enter the data to send
	unsigned char mydata[] = "SPI1 Works With Arduino!";
 80002ce:	4b22      	ldr	r3, [pc, #136]	; (8000358 <main+0x90>)
 80002d0:	1d3c      	adds	r4, r7, #4
 80002d2:	461d      	mov	r5, r3
 80002d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002dc:	c403      	stmia	r4!, {r0, r1}
 80002de:	7022      	strb	r2, [r4, #0]

	//this function initializes GPIO Button
	GPIO_ButtonInit();
 80002e0:	f7ff ff96 	bl	8000210 <GPIO_ButtonInit>

	//function to initialize GPIOs for SPI1 to work
	SPI1_GPIOInit();
 80002e4:	f7ff ffac 	bl	8000240 <SPI1_GPIOInit>

	//this function initializes SPI1
	SPI1_Init();
 80002e8:	f7ff ffd0 	bl	800028c <SPI1_Init>

//	//enable SSI if SSM is used with no external slave device
//	SPI_SSIConfig(SPI1, ENABLE);

	//enable SSOE for SPI while using external slave device
	SPI_SSOEConfig(SPI1, ENABLE);
 80002ec:	2101      	movs	r1, #1
 80002ee:	481b      	ldr	r0, [pc, #108]	; (800035c <main+0x94>)
 80002f0:	f000 fbbd 	bl	8000a6e <SPI_SSOEConfig>
	//send the data only if button is pressed and then stop when button is released
	while(1)
	{

	//wait till button is pressed on Nucleo to send the data and then move on
	while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13));
 80002f4:	bf00      	nop
 80002f6:	210d      	movs	r1, #13
 80002f8:	4819      	ldr	r0, [pc, #100]	; (8000360 <main+0x98>)
 80002fa:	f000 fabb 	bl	8000874 <GPIO_ReadFromInputPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1f8      	bne.n	80002f6 <main+0x2e>
	delay();	//button debouncing
 8000304:	f7ff ff6e 	bl	80001e4 <delay>

	//enable SPIx peripheral just before sending data(no configurations are allowed after this is enabled)
	SPI_PeripheralControl(SPI1, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	4814      	ldr	r0, [pc, #80]	; (800035c <main+0x94>)
 800030c:	f000 fb93 	bl	8000a36 <SPI_PeripheralControl>

	//send data length information. By default Arduino will take 1 byte
	uint8_t dataLen = strlen(mydata);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff5e 	bl	80001d4 <strlen>
 8000318:	4603      	mov	r3, r0
 800031a:	b2db      	uxtb	r3, r3
 800031c:	70fb      	strb	r3, [r7, #3]
	SPI_SendData(SPI1, &dataLen, 1);
 800031e:	1cfb      	adds	r3, r7, #3
 8000320:	2201      	movs	r2, #1
 8000322:	4619      	mov	r1, r3
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <main+0x94>)
 8000326:	f000 fbd2 	bl	8000ace <SPI_SendData>

	//insert data to send
	SPI_SendData(SPI1, mydata, strlen(mydata));		//send data format (pSPIx, pTxBuffer, Length)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff51 	bl	80001d4 <strlen>
 8000332:	4602      	mov	r2, r0
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4808      	ldr	r0, [pc, #32]	; (800035c <main+0x94>)
 800033a:	f000 fbc8 	bl	8000ace <SPI_SendData>

	//confirm that SPI isn't busy
	while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 800033e:	bf00      	nop
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	4806      	ldr	r0, [pc, #24]	; (800035c <main+0x94>)
 8000344:	f000 fbaf 	bl	8000aa6 <SPI_GetFlagStatus>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f8      	bne.n	8000340 <main+0x78>

	//disable SPIx peripheral
	SPI_PeripheralControl(SPI1, DISABLE);
 800034e:	2100      	movs	r1, #0
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <main+0x94>)
 8000352:	f000 fb70 	bl	8000a36 <SPI_PeripheralControl>
	{
 8000356:	e7cd      	b.n	80002f4 <main+0x2c>
 8000358:	08000b9c 	.word	0x08000b9c
 800035c:	40013000 	.word	0x40013000
 8000360:	48000800 	.word	0x48000800

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000368:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	; (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 fbd3 	bl	8000b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f7ff ff97 	bl	80002c8 <main>

0800039a <LoopForever>:

LoopForever:
    b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000bc0 	.word	0x08000bc0
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <GPIO_PeriClockControl>:
 * @notes		- none
 *
 */
//peripheral clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d157      	bne.n	800047a <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003d2:	4b58      	ldr	r3, [pc, #352]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a57      	ldr	r2, [pc, #348]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80003d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003dc:	6153      	str	r3, [r2, #20]
		}else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 80003de:	e0a3      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a55      	ldr	r2, [pc, #340]	; (8000538 <GPIO_PeriClockControl+0x180>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e8:	4b52      	ldr	r3, [pc, #328]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a51      	ldr	r2, [pc, #324]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80003ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003f2:	6153      	str	r3, [r2, #20]
}
 80003f4:	e098      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a50      	ldr	r2, [pc, #320]	; (800053c <GPIO_PeriClockControl+0x184>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003fe:	4b4d      	ldr	r3, [pc, #308]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a4c      	ldr	r2, [pc, #304]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000408:	6153      	str	r3, [r2, #20]
}
 800040a:	e08d      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a4c      	ldr	r2, [pc, #304]	; (8000540 <GPIO_PeriClockControl+0x188>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000414:	4b47      	ldr	r3, [pc, #284]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a46      	ldr	r2, [pc, #280]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800041a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800041e:	6153      	str	r3, [r2, #20]
}
 8000420:	e082      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a47      	ldr	r2, [pc, #284]	; (8000544 <GPIO_PeriClockControl+0x18c>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800042a:	4b42      	ldr	r3, [pc, #264]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a41      	ldr	r2, [pc, #260]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000430:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000434:	6153      	str	r3, [r2, #20]
}
 8000436:	e077      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a43      	ldr	r2, [pc, #268]	; (8000548 <GPIO_PeriClockControl+0x190>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000440:	4b3c      	ldr	r3, [pc, #240]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a3b      	ldr	r2, [pc, #236]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800044a:	6153      	str	r3, [r2, #20]
}
 800044c:	e06c      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a3e      	ldr	r2, [pc, #248]	; (800054c <GPIO_PeriClockControl+0x194>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000456:	4b37      	ldr	r3, [pc, #220]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a36      	ldr	r2, [pc, #216]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800045c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000460:	6153      	str	r3, [r2, #20]
}
 8000462:	e061      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a3a      	ldr	r2, [pc, #232]	; (8000550 <GPIO_PeriClockControl+0x198>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d15d      	bne.n	8000528 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800046c:	4b31      	ldr	r3, [pc, #196]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a30      	ldr	r2, [pc, #192]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000476:	6153      	str	r3, [r2, #20]
}
 8000478:	e056      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a2b      	ldr	r2, [pc, #172]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000488:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800048c:	6153      	str	r3, [r2, #20]
}
 800048e:	e04b      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOB)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a29      	ldr	r2, [pc, #164]	; (8000538 <GPIO_PeriClockControl+0x180>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000498:	4b26      	ldr	r3, [pc, #152]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800049a:	695b      	ldr	r3, [r3, #20]
 800049c:	4a25      	ldr	r2, [pc, #148]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800049e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004a2:	6153      	str	r3, [r2, #20]
}
 80004a4:	e040      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOC)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a24      	ldr	r2, [pc, #144]	; (800053c <GPIO_PeriClockControl+0x184>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80004ae:	4b21      	ldr	r3, [pc, #132]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a20      	ldr	r2, [pc, #128]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004b4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80004b8:	6153      	str	r3, [r2, #20]
}
 80004ba:	e035      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOD)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a20      	ldr	r2, [pc, #128]	; (8000540 <GPIO_PeriClockControl+0x188>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004c6:	695b      	ldr	r3, [r3, #20]
 80004c8:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004ce:	6153      	str	r3, [r2, #20]
}
 80004d0:	e02a      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOE)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <GPIO_PeriClockControl+0x18c>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a15      	ldr	r2, [pc, #84]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80004e4:	6153      	str	r3, [r2, #20]
}
 80004e6:	e01f      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOF)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <GPIO_PeriClockControl+0x190>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80004f0:	4b10      	ldr	r3, [pc, #64]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 80004f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80004fa:	6153      	str	r3, [r2, #20]
}
 80004fc:	e014      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOG)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a12      	ldr	r2, [pc, #72]	; (800054c <GPIO_PeriClockControl+0x194>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800050c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000510:	6153      	str	r3, [r2, #20]
}
 8000512:	e009      	b.n	8000528 <GPIO_PeriClockControl+0x170>
		}else if(pGPIOx == GPIOH)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <GPIO_PeriClockControl+0x198>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d105      	bne.n	8000528 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <GPIO_PeriClockControl+0x17c>)
 8000522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000526:	6153      	str	r3, [r2, #20]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	48000400 	.word	0x48000400
 800053c:	48000800 	.word	0x48000800
 8000540:	48000c00 	.word	0x48000c00
 8000544:	48001000 	.word	0x48001000
 8000548:	48001400 	.word	0x48001400
 800054c:	48001800 	.word	0x48001800
 8000550:	48001c00 	.word	0x48001c00

08000554 <GPIO_Init>:
 * @notes		- none
 *
 */
//initialization of GPIOs and functionalities
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;	//temp register
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

	//enable peripheral clock before using this peripheral
	GPIO_PeriClockControl(pGPIOHandle ->pGPIOx, ENABLE);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff26 	bl	80003b8 <GPIO_PeriClockControl>

	//1)configure pin mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d820      	bhi.n	80005b6 <GPIO_Init+0x62>
	{
		//multiplied by 2 for appropriate left shift
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	2103      	movs	r1, #3
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	400a      	ands	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	e0bf      	b.n	8000736 <GPIO_Init+0x1e2>
	}else
	{
		/* interrupt mode */
		if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d117      	bne.n	80005ee <GPIO_Init+0x9a>
		{
			//1) configure  the FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005be:	4b47      	ldr	r3, [pc, #284]	; (80006dc <GPIO_Init+0x188>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a43      	ldr	r2, [pc, #268]	; (80006dc <GPIO_Init+0x188>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b41      	ldr	r3, [pc, #260]	; (80006dc <GPIO_Init+0x188>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a3d      	ldr	r2, [pc, #244]	; (80006dc <GPIO_Init+0x188>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
 80005ec:	e035      	b.n	800065a <GPIO_Init+0x106>

		}else if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	795b      	ldrb	r3, [r3, #5]
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	d117      	bne.n	8000626 <GPIO_Init+0xd2>
		{
			//2) configure the RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <GPIO_Init+0x188>)
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7912      	ldrb	r2, [r2, #4]
 80005fe:	4611      	mov	r1, r2
 8000600:	2201      	movs	r2, #1
 8000602:	408a      	lsls	r2, r1
 8000604:	4611      	mov	r1, r2
 8000606:	4a35      	ldr	r2, [pc, #212]	; (80006dc <GPIO_Init+0x188>)
 8000608:	430b      	orrs	r3, r1
 800060a:	6093      	str	r3, [r2, #8]
			//clear the corresponding RTSR bit
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <GPIO_Init+0x188>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	43d2      	mvns	r2, r2
 800061c:	4611      	mov	r1, r2
 800061e:	4a2f      	ldr	r2, [pc, #188]	; (80006dc <GPIO_Init+0x188>)
 8000620:	400b      	ands	r3, r1
 8000622:	60d3      	str	r3, [r2, #12]
 8000624:	e019      	b.n	800065a <GPIO_Init+0x106>

		}else if(pGPIOHandle ->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	2b06      	cmp	r3, #6
 800062c:	d115      	bne.n	800065a <GPIO_Init+0x106>
		{
			//1) configure the FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <GPIO_Init+0x188>)
 8000630:	68db      	ldr	r3, [r3, #12]
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	7912      	ldrb	r2, [r2, #4]
 8000636:	4611      	mov	r1, r2
 8000638:	2201      	movs	r2, #1
 800063a:	408a      	lsls	r2, r1
 800063c:	4611      	mov	r1, r2
 800063e:	4a27      	ldr	r2, [pc, #156]	; (80006dc <GPIO_Init+0x188>)
 8000640:	430b      	orrs	r3, r1
 8000642:	60d3      	str	r3, [r2, #12]
			//2) configure the RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <GPIO_Init+0x188>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <GPIO_Init+0x188>)
 8000656:	430b      	orrs	r3, r1
 8000658:	6093      	str	r3, [r2, #8]
		}

		//2) configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber / 4;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	f003 0303 	and.w	r3, r3, #3
 800066a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle ->pGPIOx);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000674:	d042      	beq.n	80006fc <GPIO_Init+0x1a8>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a19      	ldr	r2, [pc, #100]	; (80006e0 <GPIO_Init+0x18c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d02b      	beq.n	80006d8 <GPIO_Init+0x184>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <GPIO_Init+0x190>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d024      	beq.n	80006d4 <GPIO_Init+0x180>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <GPIO_Init+0x194>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d01d      	beq.n	80006d0 <GPIO_Init+0x17c>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a14      	ldr	r2, [pc, #80]	; (80006ec <GPIO_Init+0x198>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d016      	beq.n	80006cc <GPIO_Init+0x178>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <GPIO_Init+0x19c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d00f      	beq.n	80006c8 <GPIO_Init+0x174>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <GPIO_Init+0x1a0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d008      	beq.n	80006c4 <GPIO_Init+0x170>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <GPIO_Init+0x1a4>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d101      	bne.n	80006c0 <GPIO_Init+0x16c>
 80006bc:	2307      	movs	r3, #7
 80006be:	e01e      	b.n	80006fe <GPIO_Init+0x1aa>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e01c      	b.n	80006fe <GPIO_Init+0x1aa>
 80006c4:	2306      	movs	r3, #6
 80006c6:	e01a      	b.n	80006fe <GPIO_Init+0x1aa>
 80006c8:	2305      	movs	r3, #5
 80006ca:	e018      	b.n	80006fe <GPIO_Init+0x1aa>
 80006cc:	2304      	movs	r3, #4
 80006ce:	e016      	b.n	80006fe <GPIO_Init+0x1aa>
 80006d0:	2303      	movs	r3, #3
 80006d2:	e014      	b.n	80006fe <GPIO_Init+0x1aa>
 80006d4:	2302      	movs	r3, #2
 80006d6:	e012      	b.n	80006fe <GPIO_Init+0x1aa>
 80006d8:	2301      	movs	r3, #1
 80006da:	e010      	b.n	80006fe <GPIO_Init+0x1aa>
 80006dc:	40010400 	.word	0x40010400
 80006e0:	48000400 	.word	0x48000400
 80006e4:	48000800 	.word	0x48000800
 80006e8:	48000c00 	.word	0x48000c00
 80006ec:	48001000 	.word	0x48001000
 80006f0:	48001400 	.word	0x48001400
 80006f4:	48001800 	.word	0x48001800
 80006f8:	48001c00 	.word	0x48001c00
 80006fc:	2300      	movs	r3, #0
 80006fe:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();	//enable clock to activate it
 8000700:	4b59      	ldr	r3, [pc, #356]	; (8000868 <GPIO_Init+0x314>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a58      	ldr	r2, [pc, #352]	; (8000868 <GPIO_Init+0x314>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	6193      	str	r3, [r2, #24]
		SYSCFG ->EXTICR[temp1] = portcode << (temp2 * 4);
 800070c:	7c7a      	ldrb	r2, [r7, #17]
 800070e:	7cbb      	ldrb	r3, [r7, #18]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	fa02 f103 	lsl.w	r1, r2, r3
 8000716:	4a55      	ldr	r2, [pc, #340]	; (800086c <GPIO_Init+0x318>)
 8000718:	7cfb      	ldrb	r3, [r7, #19]
 800071a:	3302      	adds	r3, #2
 800071c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3) enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000720:	4b53      	ldr	r3, [pc, #332]	; (8000870 <GPIO_Init+0x31c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	7912      	ldrb	r2, [r2, #4]
 8000728:	4611      	mov	r1, r2
 800072a:	2201      	movs	r2, #1
 800072c:	408a      	lsls	r2, r1
 800072e:	4611      	mov	r1, r2
 8000730:	4a4f      	ldr	r2, [pc, #316]	; (8000870 <GPIO_Init+0x31c>)
 8000732:	430b      	orrs	r3, r1
 8000734:	6013      	str	r3, [r2, #0]
	}

	//2)configure pin speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	799b      	ldrb	r3, [r3, #6]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	609a      	str	r2, [r3, #8]
	pGPIOHandle ->pGPIOx ->OSPEEDR |= temp;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6899      	ldr	r1, [r3, #8]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	430a      	orrs	r2, r1
 8000774:	609a      	str	r2, [r3, #8]

	//3)configure pupd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	79db      	ldrb	r3, [r3, #7]
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	60da      	str	r2, [r3, #12]
	pGPIOHandle ->pGPIOx ->PUPDR |= temp;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	68d9      	ldr	r1, [r3, #12]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	60da      	str	r2, [r3, #12]

	//4)configure optype (only 1 bit, no need to x2)
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7a1b      	ldrb	r3, [r3, #8]
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	685a      	ldr	r2, [r3, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	4619      	mov	r1, r3
 80007d2:	2301      	movs	r3, #1
 80007d4:	408b      	lsls	r3, r1
 80007d6:	43db      	mvns	r3, r3
 80007d8:	4619      	mov	r1, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	400a      	ands	r2, r1
 80007e0:	605a      	str	r2, [r3, #4]
	pGPIOHandle ->pGPIOx ->OTYPER |= temp;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	6859      	ldr	r1, [r3, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	430a      	orrs	r2, r1
 80007f0:	605a      	str	r2, [r3, #4]

	//5)configure alt  functionality
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	795b      	ldrb	r3, [r3, #5]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d132      	bne.n	8000860 <GPIO_Init+0x30c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber / 8; //divide by 8 to check if its AFR[0] or AFR[1]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber % 8; //modulus by 8
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791b      	ldrb	r3, [r3, #4]
 8000808:	f003 0307 	and.w	r3, r3, #7
 800080c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	3208      	adds	r2, #8
 8000816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	210f      	movs	r1, #15
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	4619      	mov	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4011      	ands	r1, r2
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	3208      	adds	r2, #8
 8000832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle ->pGPIOx ->AFR[temp1] |= (pGPIOHandle ->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	3208      	adds	r2, #8
 800083e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7a5b      	ldrb	r3, [r3, #9]
 8000846:	4619      	mov	r1, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	4619      	mov	r1, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4311      	orrs	r1, r2
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	3208      	adds	r2, #8
 800085c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000860:	bf00      	nop
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	40010000 	.word	0x40010000
 8000870:	40010400 	.word	0x40010400

08000874 <GPIO_ReadFromInputPin>:
 * @notes		- Input data register is read on the defined pin number and is moved to leftmost place in register(IDR0)
 *
 */
//data read pin
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)	//it has to return value
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	460b      	mov	r3, r1
 800087e:	70fb      	strb	r3, [r7, #3]
	uint8_t	value;
	value = (uint8_t)((pGPIOx -> IDR >> PinNumber) & 0x00000001); //left shifting the reading bit to leftmost register and masking to read it
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	691a      	ldr	r2, [r3, #16]
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	fa22 f303 	lsr.w	r3, r2, r3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
	return value;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
}
 8000894:	4618      	mov	r0, r3
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SPI_PeriClockControl>:
 *
 * @notes		- none
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d12b      	bne.n	800090a <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <SPI_PeriClockControl+0xcc>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a2c      	ldr	r2, [pc, #176]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c4:	6193      	str	r3, [r2, #24]
		}else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 80008c6:	e04b      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a26      	ldr	r2, [pc, #152]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	61d3      	str	r3, [r2, #28]
}
 80008dc:	e040      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a25      	ldr	r2, [pc, #148]	; (8000978 <SPI_PeriClockControl+0xd8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f0:	61d3      	str	r3, [r2, #28]
}
 80008f2:	e035      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <SPI_PeriClockControl+0xdc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d131      	bne.n	8000960 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000906:	6193      	str	r3, [r2, #24]
}
 8000908:	e02a      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <SPI_PeriClockControl+0xcc>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800091c:	6193      	str	r3, [r2, #24]
}
 800091e:	e01f      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d106      	bne.n	8000936 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SPI_PeriClockControl+0xd0>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <SPI_PeriClockControl+0xd0>)
 800092e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000932:	61d3      	str	r3, [r2, #28]
}
 8000934:	e014      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <SPI_PeriClockControl+0xd8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000948:	61d3      	str	r3, [r2, #28]
}
 800094a:	e009      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SPI_PeriClockControl+0xdc>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d105      	bne.n	8000960 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SPI_PeriClockControl+0xd0>)
 800095a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800095e:	6193      	str	r3, [r2, #24]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40013000 	.word	0x40013000
 8000970:	40021000 	.word	0x40021000
 8000974:	40003800 	.word	0x40003800
 8000978:	40003c00 	.word	0x40003c00
 800097c:	40013c00 	.word	0x40013c00

08000980 <SPI_Init>:
 *
 * @notes		- none
 *
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
/* configuring registers (SPI_CR1) */
	uint32_t tempreg = 0;		//defining a temporary 32-bit register to put in all user configurations
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]

	//enable peripheral clock
	SPI_PeriClockControl(pSPIHandle ->pSPIx, ENABLE);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff84 	bl	80008a0 <SPI_PeriClockControl>

	//1) device mode configuration for MSTR bit
	tempreg |= pSPIHandle ->SPI_PinConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]

	//2) bus configuration
	if(pSPIHandle ->SPI_PinConfig.SPI_BusConfig == SPI_BUS_FD)	//for full-duplex
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d104      	bne.n	80009b8 <SPI_Init+0x38>
	{
		//BIDIMODE should be 0
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e014      	b.n	80009e2 <SPI_Init+0x62>

	}else if(pSPIHandle ->SPI_PinConfig.SPI_BusConfig == SPI_BUS_HD)	//for half-duplex
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d104      	bne.n	80009ca <SPI_Init+0x4a>
	{
		//BIDIMODE should be 1
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e00b      	b.n	80009e2 <SPI_Init+0x62>

	}else if(pSPIHandle ->SPI_PinConfig.SPI_BusConfig == SPI_BUS_SIM_Rx)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d107      	bne.n	80009e2 <SPI_Init+0x62>
	{
		//BIDIMODE should be 0
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d8:	60fb      	str	r3, [r7, #12]

		//RXONLY should be 1
		tempreg |= (1 << SPI_CR1_RXONLY);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e0:	60fb      	str	r3, [r7, #12]
	}

	//3) sclk speed configuration
	tempreg |= pSPIHandle ->SPI_PinConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	799b      	ldrb	r3, [r3, #6]
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	461a      	mov	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

	//4) DFF or CRCL configuration
	tempreg |= pSPIHandle ->SPI_PinConfig.SPI_DFF << SPI_CR1_CRCL;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	02db      	lsls	r3, r3, #11
 80009f6:	461a      	mov	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]

	//5) CPOL configuration
	tempreg |= pSPIHandle ->SPI_PinConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a1b      	ldrb	r3, [r3, #8]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	//6) CPHA configuration
	tempreg |= pSPIHandle ->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a5b      	ldrb	r3, [r3, #9]
 8000a10:	461a      	mov	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

	//7) SSM configuration
	tempreg |= pSPIHandle ->SPI_PinConfig.SPI_SSM << SPI_CR1_SSM;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7a9b      	ldrb	r3, [r3, #10]
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]

	//write the obtained register sequence to CR1
	pSPIHandle ->pSPIx->CR1 = tempreg;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	601a      	str	r2, [r3, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <SPI_PeripheralControl>:
 *
 * @notes		- This is used to (en)disable the SPIx after all configurations just before sending the data.
 * 				- Once enabled, no configuration modification can be done unless disabled.
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	460b      	mov	r3, r1
 8000a40:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a42:	78fb      	ldrb	r3, [r7, #3]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d106      	bne.n	8000a56 <SPI_PeripheralControl+0x20>
	{
		pSPIx ->CR1 |= (1 << SPI_CR1_SPE);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx ->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a54:	e005      	b.n	8000a62 <SPI_PeripheralControl+0x2c>
		pSPIx ->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SPI_SSOEConfig>:
 *
 * @notes		- Software Slave Output Enable register configuration
 *
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a7a:	78fb      	ldrb	r3, [r7, #3]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d106      	bne.n	8000a8e <SPI_SSOEConfig+0x20>
	{
		pSPIx ->CR2 |= (1 << SPI_CR2_SSOE);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f043 0204 	orr.w	r2, r3, #4
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx ->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000a8c:	e005      	b.n	8000a9a <SPI_SSOEConfig+0x2c>
		pSPIx ->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f023 0204 	bic.w	r2, r3, #4
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	605a      	str	r2, [r3, #4]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SPI_GetFlagStatus>:

/*
 * Function which returns SR flag status (for ease inside SPI_SendData)
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
	if(pSPIx ->SR & FlagName)	//if it is set
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e000      	b.n	8000ac2 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;		//otherwise FLAG_RESET
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <SPI_SendData>:
 * 				- The data register serves as an interface between the Rx and Tx FIFO Buffers.
 * 				- When the data register is read, RxFIFO is accessed, and the write to data register accesses TxFIFO.
 * 				- Status register (SPIx_SR) gives indication if Rx and Tx FIFO buffers are filled/empty from RXNE and TXE registers.
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000ada:	e027      	b.n	8000b2c <SPI_SendData+0x5e>
	{
		//1) wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);	//program flow stays here until until TXE flag is set
 8000adc:	bf00      	nop
 8000ade:	2102      	movs	r1, #2
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ffe0 	bl	8000aa6 <SPI_GetFlagStatus>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f8      	beq.n	8000ade <SPI_SendData+0x10>

		//2) check the DFF bit in CR1
		if(pSPIx ->CR1 & (1 << SPI_CR1_CRCL))
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00e      	beq.n	8000b16 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//load the data into DR
			pSPIx ->DR = *((uint16_t*)pTxBuffer);	//typecast to 16 bit type
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	60da      	str	r2, [r3, #12]
			Len--;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
			Len--;	//doing 2 times as 2 bytes of data is sent from the buffer
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;		//this will be incremented by 2
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	3301      	adds	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	e00a      	b.n	8000b2c <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx ->DR = *((uint8_t*)pTxBuffer);	//typecast to 8 bit type
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60da      	str	r2, [r3, #12]
			Len--;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1d4      	bne.n	8000adc <SPI_SendData+0xe>
		}
	}
}
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <__libc_init_array>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4d0d      	ldr	r5, [pc, #52]	; (8000b74 <__libc_init_array+0x38>)
 8000b40:	4c0d      	ldr	r4, [pc, #52]	; (8000b78 <__libc_init_array+0x3c>)
 8000b42:	1b64      	subs	r4, r4, r5
 8000b44:	10a4      	asrs	r4, r4, #2
 8000b46:	2600      	movs	r6, #0
 8000b48:	42a6      	cmp	r6, r4
 8000b4a:	d109      	bne.n	8000b60 <__libc_init_array+0x24>
 8000b4c:	4d0b      	ldr	r5, [pc, #44]	; (8000b7c <__libc_init_array+0x40>)
 8000b4e:	4c0c      	ldr	r4, [pc, #48]	; (8000b80 <__libc_init_array+0x44>)
 8000b50:	f000 f818 	bl	8000b84 <_init>
 8000b54:	1b64      	subs	r4, r4, r5
 8000b56:	10a4      	asrs	r4, r4, #2
 8000b58:	2600      	movs	r6, #0
 8000b5a:	42a6      	cmp	r6, r4
 8000b5c:	d105      	bne.n	8000b6a <__libc_init_array+0x2e>
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b64:	4798      	blx	r3
 8000b66:	3601      	adds	r6, #1
 8000b68:	e7ee      	b.n	8000b48 <__libc_init_array+0xc>
 8000b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6e:	4798      	blx	r3
 8000b70:	3601      	adds	r6, #1
 8000b72:	e7f2      	b.n	8000b5a <__libc_init_array+0x1e>
 8000b74:	08000bb8 	.word	0x08000bb8
 8000b78:	08000bb8 	.word	0x08000bb8
 8000b7c:	08000bb8 	.word	0x08000bb8
 8000b80:	08000bbc 	.word	0x08000bbc

08000b84 <_init>:
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b86:	bf00      	nop
 8000b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8a:	bc08      	pop	{r3}
 8000b8c:	469e      	mov	lr, r3
 8000b8e:	4770      	bx	lr

08000b90 <_fini>:
 8000b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b92:	bf00      	nop
 8000b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b96:	bc08      	pop	{r3}
 8000b98:	469e      	mov	lr, r3
 8000b9a:	4770      	bx	lr
